/*
Задача 4. Обратный пузырёк
Описание
Напишите программу, которая создаёт и инициализирует неупорядоченный массив целых чисел на 10 элементов
и сортирует его пузырьком в обратную сторону.

В обычной сортировке пузырьком после первой итерации самый большой элемент массива оказывается в конце массива,
после второй итерации второй по максимальности значения элемент оказывается в массиве предпоследним и так далее.
В самом конце получается, что самый маленький элемент массива стоит в начале массива.

Сортировка пузырьком в обратную сторону предполагает обратный механизм —
после первой итерации самый маленький элемент массива оказывается в начале массива,
после второй итерации второй по минимальности элемент оказывается вторым по счёту в массиве и так далее.

На экран необходимо вывести массив до сортировки и массив после сортировки. Числа для заполнения массива придумайте сами.

Пример работы программы
Массив до сортировки: 10 3 4 1 8 9 7 2 6 5
Массив после сортировки: 1 2 3 4 5 6 7 8 9 10
*/

#include <iostream>

int main()
{
    setlocale(LC_ALL, "rus");                       // Настройка локали для поддержка вывода кирилицы в консоль

    const int size = 10;
    int intArr[size] = { 10,3,4,1,8,9,7,2,6,5 };    // Создаем массив и иницализируем его

    std::cout << "Массив до сортировки:";           // Вывод первоначального массива перебором всех элементов

    for (int element : intArr)
    {
        std::cout << " " << element;
    }
    std::cout << std::endl;

    bool swap{};                                    // Переменная - флаг выполнения перестановки элементов массива
    
    do
    {
        swap = false;                               // Сброс флага сортировки
        for (int i = size - 1; i >= 1; i--)
        {
            if (intArr[i] < intArr[i - 1])          // Сравнение двух соседних элементов, определение необходимости перестановки
            {
                int temp = intArr[i];
                intArr[i] = intArr[i - 1];          // Перестановка двух соседних элементов через временную переменную
                intArr[i - 1] = temp;
                swap = true;                        // Установка флага сортировки в текущей итерации
            } 
        }
    } while (swap);                                 // Цикл do-while выполняется пока установлен флаг сортировки

    std::cout << "Массив после сортировки:";        // Вывод пересортированного массива перебором всех элементов

    for (int element : intArr)
    {
        std::cout << " " << element;
    }
    std::cout << std::endl;

    return EXIT_SUCCESS;
}