/*
Задача 3. Динамическая таблица умножения
Описание
Напишите четыре функции:

create_two_dim_array: принимает на вход количество строк и столбцов.
Создаёт целочисленный двумерный динамический массив заданной размерности и возвращает указатель на него.

fill_two_dim_array: принимает на вход указатель на двумерный целочисленный массив,
количество строк и столбцов в нём. Заполняет полученный массив значениями из таблицы умножения.
Таблица не ограничена 10 строками или 10 столбцами. Не возвращает ничего.

print_two_dim_array: принимает на вход указатель на двумерный целочисленный массив,
количество строк и столбцов в нём. Выводит полученный массив на консоль. Не возвращает ничего.

delete_two_dim_array: принимает на вход указатель на двумерный целочисленный массив,
количество строк и столбцов в нём. Очищает полученный массив. Не возвращает ничего.

Используйте эти функции для организации работы программы,
которая спрашивает у пользователя количество строк и столбцов
и выводит на консоль таблицу умножения заданной размерности.

Примеры работы программы
Введите количество строк: 10
Введите количество столбцов: 10
Таблица умножения:
 1  2  3  4  5  6  7  8  9  10
 2  4  6  8 10 12 14 16 18  20
 3  6  9 12 15 18 21 24 27  30
 4  8 12 16 20 24 28 32 36  40
 5 10 15 20 25 30 35 40 45  50
 6 12 18 24 30 36 42 48 54  60
 7 14 21 28 35 42 49 56 63  70
 8 16 24 32 40 48 56 64 72  80
 9 18 27 36 45 54 63 72 81  90
10 20 30 40 50 60 70 80 90 100
Введите количество строк: 5
Введите количество столбцов: 3
Таблица умножения:
1  2  3
2  4  6
3  6  9
4  8 12
5 10 15
Введите количество строк: 3
Введите количество столбцов: 3
Таблица умножения:
1 2 3
2 4 6
3 6 9
*/

#include <iostream>

int** create_two_dim_array(int, int);						// Прототип функции создания двумерного массива
void fill_two_dim_array(int**, int, int);					// Прототип функции заполнения двумерного массива
void print_two_dim_array(int**, int, int);					// Прототип функции вывода двумерного массива в консоль
void delete_two_dim_array(int**, int);						// Прототип функции очищения массива

int main(int argc, char** argv)
{
	setlocale(LC_ALL, "rus");								// Поддержка кирилицы в выводе в консоль

	int rows{}, columns{};									// Переменные для хранения размера массива (кол-во строк и столбцов)

	std::cout << "Введите количество строк: ";				// Получаем от пользователя количество строк
	std::cin >> rows;
	std::cout << "Введите количество столбцов: ";			// Получаем от пользователя количество столбцов
	std::cin >> columns;
	std::cout << "Таблица умножения: " << std::endl;

	int** arr = create_two_dim_array(rows, columns);		// Вызываем функцию создания двумерного массива
	fill_two_dim_array(arr, rows, columns);					// Вызываем функцию заполнения массива таблицей умножения
	print_two_dim_array(arr, rows, columns);				// Вызываем функцию вывода двумерного массива в консоль
	delete_two_dim_array(arr, rows);						// Вызываем функцию очищения двумерного массива

	return EXIT_SUCCESS;
}

int** create_two_dim_array(int rows, int columns)			// Реализация функции создания двумерного массива
{
	int** array = new int* [rows];
	for (int r = 0; r < rows; r++)
	{
		array[r] = new int[columns]();
	}
	return array;
}

void fill_two_dim_array(int** array, int rows, int columns) // Реализация функции заполнения двумерного массива
{
	for (int r = 0; r < rows; r++)
	{
		for (int c = 0; c < columns; c++)
		{
			array[r][c] = (c + 1) * (r + 1);
		}
	}
}

void print_two_dim_array(int** array, int rows, int columns)	// Реализация функции вывода двумерного массива в консоль
{
	for (int r = 0; r < rows; r++)
	{
		for (int c = 0; c < columns; c++)
		{
			std::cout << array[r][c] << "\t";
		}
		std::cout << std::endl;
	}
}

void delete_two_dim_array(int** array, int rows)			// Реализация функции очистки двумерного массива
{
	for (int r = 0; r < rows; r++)
	{
		delete[] array[r];									// очищаем каждый подмассив отдельно
	}
	delete[] array;											// очищаем верхнеуровневый массив указателей
}